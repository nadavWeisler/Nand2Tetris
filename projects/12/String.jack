// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int stringLength;
	field int max;

    /** constructs a new empty string with a maximum string_length of maxStringLength
     *  and initial string_length of 0. */
    constructor String new(int maxStringLength) {
		let stringLength = 0;

		if(maxStringLength = 0) {
            let maxStringLength = 1;
        }
		let max = maxStringLength;
		let str = Array.new maxStringLength);
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Array.dispose(string);
		return;
    }

    /** Returns the current string_length of this string. */
    method int length() {
		return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (stringLength < max) {
			let str[stringLength] = c;
			let stringLength = stringLength + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (stringLength > 0) {
			let stringLength = stringLength - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int index;
		var int intValue;
		var boolean negative;
		
		if ((str[0] = 45) & (stringLength > 0)) { 
			let negative = true;
			let index = 1;
		}
		else {
			let negative = false;
			let index = 0;
		}
		
		let intValue = 0;
		while (index < stringLength) {
			if (str[index] < 58 & str[index] > 47) { 
				let intValue = (str[index] - 48) + (intValue * 10);
			}
			let index = index + 1;
		}
		if (negative) {
			return -intValue;
		}
		else {
			return intValue;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int value) {
		let stringLength = 0;
		if (value < 0) {
			let value = -value;
			do appendChar(45); 
		}		
		do setIntHelper(value);
		return;
    }
	
	/** Assistance method that deals with Modulo for setInt. */
	method void setIntHelper(int value) {
		var int mHelper;
		var int dHelper;
		let dHelper = value / 10;
		let mHelper = value - (dHelper * 10);
		if (value < 10) {
			do appendChar(mHelper + 48);
		}
		else {
			do setIntHelper(dHelper);
			do appendChar(mHelper + 48);
		}
		return;
    }
	
    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
