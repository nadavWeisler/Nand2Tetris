// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {	
	static array memory;
	static array lst;

    /** Initializes the class. */
    function void init() {
		let memory = 0;
		let lst = 2048;
        let lst[0] = 0;
        let lst[1] = 14331;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let memory[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int currentBlock;
		var int referenceToAddress;
		var int newBlockSize;
		let currentBlock = Memory.getCurrentAllocBlock(size);
		if (currentBlock = -1) {
			return 0;
		}
		let referenceToAddress = currentBlock + 2 + currentBlock[1] - (size + 2);
		let newBlockSize = currentBlock[1] - (size + 2);
		let referenceToAddress[1] = size;
		do Memory.poke(referenceToAddress, referenceToAddress + 2);
		let currentBlock[1] = newBlockSize;
		return referenceToAddress;
    }

	/** Helper method for block size in alloc. */
	function int getCurrentAllocBlock(int size){
		var int next;
		var int block;
		var int blockSize;
		let block = lst;
		while (~(block = 0)) {	
			let blockSize = block[1];	
			if (blockSize + 1 > size + 2) {
				return block;
			}	
			let next = block[0];	
			let block = next;
		}
		return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
		var int next;
		let object = object - 2;
        let next = lst[0];
        let lst[0] = object;
        let object[0] = next;
        return;
    }    
}
