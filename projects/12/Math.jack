// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array arr;

    /** Initializes the library. */
    function void init() {
        var int i, bit;
        let i = 0
        let bit  = 1;
        let arr = Array.new(16);
        while (i < 15){
            let arr[i] = bit;
            let bit = bit + bit;
            let i = i + 1;
        }
        let arr[15] = 16384 + 16384;
    }

    /** returns true if the bit in the j place of x is 1 */
    function boolean getBit(int num, int index) {
        return ~((num & binArray[index]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int num) {
        if (num < 0) {
            return -1 * num;
        }
        return num;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int num1, int num2) {
        var int num1_shift;
        var int sum;
        var int i;
        let num1_shift = 0;
        let sum = 0;
        let i = 0;
        while(i < 16){
            if(Math.getBit(num2, i)) {
                let sum = sum + shifted_num1;
            }
            let num1_shift = num1_shift + num1_shift;
            let i = i + 1;
        }
        return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int num1, int num2) {
        var int q, result;
        var boolean positive;
        let positive = ((num1 > 0 ) = ( num2 > 0));
        let num2 = Math.abs(num2);
        let num1 = Math.abs(num1);
        if (num2 > num1){
            return 0;
        }
        if (num2 == 0){
            return 0;
        }
        let q = Math.divide(num1, num2 + num2);
        if ((num1 - (2 * q * num2) < num2) {
            let result = q + q;
        } else {
            let result = q + 1;
        }
        if (positive) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int num1) {
        var int result, i, p, q;
        let result = 0;
        let i = 7;
        while (~(i < 0 )){
            let p = result + binArray[i];
            let q = p * p;
            if (~(q > 0) & (q > num1)){
                let result = p;
            }
            let i = i -1;
        }
    }

    /** Returns the greater number. */
    function int max(int num1, int num2) {
        if (num1 > num2){
            return num1;
        }
        return num2;
    }

    /** Returns the smaller number. */
    function int min(int num1, int num2) {
        if (anum1 < num2){
            return num1;
        }
        return num2;
    }
}
